{"version":3,"sources":["component/Map.js","component/InputPage.js","component/GenerateQR.js","App.js","serviceWorker.js","index.js"],"names":["Geocode","setApiKey","enableDebug","Map","props","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","city","area","state","latValue","geometry","location","lat","lngValue","lng","localStorage","setItem","markerPosition","mapPosition","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","error","console","center","this","nextProps","nextState","AsyncMap","withScriptjs","withGoogleMap","google","defaultZoom","zoom","defaultCenter","style","width","height","paddingLeft","marginTop","marginBottom","className","draggable","onDragEnd","position","onClose","padding","margin","undefined","htmlFor","type","placeholder","readOnly","laceholder","googleMapURL","loadingElement","containerElement","mapElement","React","Component","Inputpage","Email","StoreName","StoreLocation","Location","validated","message","b_message","onChangeEmail","bind","onChangeStoreName","onChangeStoreLocation","onChangeLocation","handleSubmit","e","currentTarget","checkValidity","preventDefault","history","push","window","reload","display","Form","noValidate","onSubmit","Group","as","Col","controlId","Label","Control","required","Button","variant","withRouter","QR_generator","key","shortid","generate","jsonData","getItem","Container","Row","xs","onClick","Generate_data","App","exact","path","render","to","component","InputPage","GenerateQR","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"mdAIAA,IAAQC,UAAU,2CAClBD,IAAQE,c,IA8QOC,E,YA5QX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAoEVC,QAAU,SAACC,GAEP,IADA,IACSC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,GAAID,EAAaC,GAAGE,MAAM,IAAM,gCAAkCH,EAAaC,GAAGE,MAAM,GAEpF,OADOH,EAAaC,GAAGG,WAzEhB,EAoFnBC,QAAU,SAACL,GAEP,IADA,IACSC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,GAAID,EAAaC,GAAGE,MAAM,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAIN,EAAaC,GAAGE,MAAMD,OAAQI,IAC9C,GAAI,wBAA0BN,EAAaC,GAAGE,MAAMG,IAAM,aAAeN,EAAaC,GAAGE,MAAMG,GAE3F,OADON,EAAaC,GAAGG,WA1FxB,EAuGnBG,SAAW,SAACP,GAER,IADA,IACSC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,IAAK,IAAIA,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,GAAID,EAAaC,GAAGE,MAAM,IAAM,gCAAkCH,EAAaC,GAAGE,MAAM,GAEpF,OADQH,EAAaC,GAAGG,WA5GrB,EAsHnBI,SAAW,SAACC,GACR,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAvHnC,EA8HnBC,kBAAoB,SAACL,KA9HF,EAoInBM,gBAAkB,SAACC,GACf,IAAMC,EAAUD,EAAME,kBAClBlB,EAAegB,EAAMG,mBACrBC,EAAO,EAAKrB,QAAQC,GACpBqB,EAAO,EAAKhB,QAAQL,GACpBsB,EAAQ,EAAKf,SAASP,GACtBuB,EAAWP,EAAMQ,SAASC,SAASC,MACnCC,EAAWX,EAAMQ,SAASC,SAASG,MAEvCC,aAAaC,QAAQ,WAAYb,GACjC,EAAKP,SAAS,CACVO,QAAUA,GAAqB,GAC/BI,KAAOA,GAAe,GACtBD,KAAOA,GAAe,GACtBE,MAAQA,GAAiB,GACzBS,eAAgB,CACZL,IAAKH,EACLK,IAAKD,GAETK,YAAa,CACTN,IAAKH,EACLK,IAAKD,MAzJE,EAoKnBM,gBAAkB,SAACxB,GACf,IAAIyB,EAASzB,EAAM0B,OAAOT,MACtBU,EAAS3B,EAAM0B,OAAOP,MAE1BlC,IAAQ2C,WAAWH,EAAQE,GAAQE,MAC/B,SAAAC,GACI,IAAMtB,EAAUsB,EAASC,QAAQ,GAAGtB,kBAChClB,EAAeuC,EAASC,QAAQ,GAAGrB,mBACnCC,EAAO,EAAKrB,QAAQC,GACpBqB,EAAO,EAAKhB,QAAQL,GACpBsB,EAAQ,EAAKf,SAASP,GAC1B,EAAKU,SAAS,CACVO,QAAUA,GAAqB,GAC/BI,KAAOA,GAAe,GACtBD,KAAOA,GAAe,GACtBE,MAAQA,GAAiB,QAGjC,SAAAmB,GACIC,QAAQD,MAAMA,OArLtB,EAAKnB,MAAQ,CACTL,QAAS,GACTG,KAAM,GACNC,KAAM,GACNC,MAAO,GACPU,YAAa,CACTN,IAAK,EAAK5B,MAAM6C,OAAOjB,IACvBE,IAAK,EAAK9B,MAAM6C,OAAOf,KAE3BG,eAAgB,CACZL,IAAK,EAAK5B,MAAM6C,OAAOjB,IACvBE,IAAK,EAAK9B,MAAM6C,OAAOf,MAbhB,E,iFAoBE,IAAD,OAChBlC,IAAQ2C,WAAWO,KAAKtB,MAAMU,YAAYN,IAAKkB,KAAKtB,MAAMU,YAAYJ,KAAKU,MACvE,SAAAC,GACI,IAAMtB,EAAUsB,EAASC,QAAQ,GAAGtB,kBAChClB,EAAeuC,EAASC,QAAQ,GAAGrB,mBACnCC,EAAO,EAAKrB,QAAQC,GACpBqB,EAAO,EAAKhB,QAAQL,GACpBsB,EAAQ,EAAKf,SAASP,GAI1B,EAAKU,SAAS,CACVO,QAAUA,GAAqB,GAC/BI,KAAOA,GAAe,GACtBD,KAAOA,GAAe,GACtBE,MAAQA,GAAiB,QAGjC,SAAAmB,GACIC,QAAQD,MAAMA,Q,4CAWJI,EAAWC,GAC7B,OACIF,KAAKtB,MAAMS,eAAeL,MAAQkB,KAAK9C,MAAM6C,OAAOjB,KACpDkB,KAAKtB,MAAML,UAAY6B,EAAU7B,SACjC2B,KAAKtB,MAAMF,OAAS0B,EAAU1B,MAC9BwB,KAAKtB,MAAMD,OAASyB,EAAUzB,MAC9BuB,KAAKtB,MAAMA,QAAUwB,EAAUxB,OAGxBsB,KAAK9C,MAAM6C,OAAOjB,MAAQmB,EAAUF,OAAOjB,UAA/C,I,+BAgID,IAAD,OACCqB,EAAWC,uBACbC,yBACI,SAAAnD,GAAK,OACD,kBAAC,YAAD,CAAWoD,OAAQ,EAAKpD,MAAMoD,OAC1BC,YAAa,EAAKrD,MAAMsD,KACxBC,cAAe,CAAE3B,IAAK,EAAKJ,MAAMU,YAAYN,IAAKE,IAAK,EAAKN,MAAMU,YAAYJ,MAG9E,kBAAC,IAAD,CACI0B,MAAO,CACHC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,MACXC,aAAc,SAElB5C,gBAAiB,EAAKA,gBACtB6C,UAAU,qBACVzD,MAAO,CAAC,eAGZ,kBAAC,SAAD,CAAQ+C,OAAQ,EAAKpD,MAAMoD,OACvBtC,KAAM,eACNiD,WAAW,EACXC,UAAW,EAAK7B,gBAChB8B,SAAU,CAAErC,IAAK,EAAKJ,MAAMS,eAAeL,IAAKE,IAAK,EAAKN,MAAMS,eAAeH,OAEnF,kBAAC,SAAD,MAEA,kBAAC,aAAD,CACIoC,QAAS,EAAKlD,kBACdiD,SAAU,CAAErC,IAAM,EAAKJ,MAAMS,eAAeL,IAAM,MAASE,IAAK,EAAKN,MAAMS,eAAeH,MAE1F,6BACI,0BAAM0B,MAAO,CAAEW,QAAS,EAAGC,OAAQ,IAAM,EAAK5C,MAAML,gBA2C5E,YAnC8BkD,IAA1BvB,KAAK9C,MAAM6C,OAAOjB,IACZ,6BACF,6BAKI,yBAAKkC,UAAU,cACX,2BAAOQ,QAAQ,IAAf,QACA,2BAAOC,KAAK,OAAOzD,KAAK,OAAO0D,YAAY,OAAOV,UAAU,eAAepD,SAAUoC,KAAKpC,SAAU+D,SAAS,WAAW1D,MAAO+B,KAAKtB,MAAMD,QAE9I,yBAAKuC,UAAU,cAEX,2BAAOS,KAAK,OAAOzD,KAAK,QAAQ4D,WAAW,QAAQZ,UAAU,eAAepD,SAAUoC,KAAKpC,SAAU+D,SAAS,WAAW1D,MAAO+B,KAAKtB,MAAMA,SAE/I,yBAAKsC,UAAU,cACX,2BAAOS,KAAK,OAAOzD,KAAK,UAAUgD,UAAU,eAAepD,SAAUoC,KAAKpC,SAAU+D,SAAS,WAAW1D,MAAO+B,KAAKtB,MAAML,YAGlI,kBAAC8B,EAAD,CACI0B,aAAa,uGACbC,eACI,yBAAKpB,MAAO,CAAEE,OAAO,UAEzBmB,iBACI,yBAAKrB,MAAO,CAAEE,OAAQZ,KAAK9C,MAAM0D,UAErCoB,WACI,yBAAKtB,MAAO,CAAEE,OAAO,aAK3B,yBAAKF,MAAO,CAAEE,OAAQZ,KAAK9C,MAAM0D,c,GAxQjCqB,IAAMC,WCClBC,E,YACF,WAAYjF,GAAQ,IAAD,8BACf,4CAAMA,KACDwB,MAAQ,CACT0D,MAAO,GACPC,UAAW,GACXC,cAAe,GACfC,SAAU,SACVC,WAAW,EACXC,QAAS,GACTC,WAAW,EACX3C,OAAQ,CACJjB,IAAK,QACLE,IAAK,SAETwB,KAAM,IAGV,EAAKmC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBArBL,E,2EAwBLK,GACVjD,KAAKlC,SAAS,CAAEsE,MAAOa,EAAElF,OAAOE,MAAOyE,WAAW,M,wCAGpCO,GACdjD,KAAKlC,SAAS,CAAEuE,UAAWY,EAAElF,OAAOE,MAAOyE,WAAW,M,4CAGpCO,GAClBjD,KAAKlC,SAAS,CAAEwE,cAAeW,EAAElF,OAAOE,MAAOyE,WAAW,M,gFAGvCO,G,iFACbjD,KAAKlC,SAAS,CAAEyE,SAAUU,EAAElF,OAAOE,MAAOyE,WAAW,I,mLAG5C7E,G,wEAEc,IADhBA,EAAMqF,cACVC,kBACLtF,EAAMuF,iBACNpD,KAAK9C,MAAMmG,QAAQC,KAAK,eACxBC,OAAO1E,SAAS2E,QAAO,I,SAErBxD,KAAKlC,SAAS,CAAE0E,WAAW,I,OACjCvD,aAAaC,QAAQ,QAASc,KAAKtB,MAAM0D,OACzCnD,aAAaC,QAAQ,YAAac,KAAKtB,MAAM2D,WAC7CpD,aAAaC,QAAQ,gBAAiBc,KAAKtB,MAAM4D,e,sIAIjD,OACI,yBAAKtB,UAAU,2BAA2ByC,QAASzD,KAAKtB,MAAM+E,SAC1D,yBAAKzC,UAAU,gBACX,0EAGJ,kBAAC0C,EAAA,EAAD,CAAMC,YAAU,EAACnB,UAAWxC,KAAKtB,MAAM8D,UAAWoB,SAAU5D,KAAKgD,cAC7D,kBAACU,EAAA,EAAKG,MAAN,CAAYC,GAAIC,IAAKC,UAAU,qBAAqBhD,UAAU,cAC1D,kBAAC0C,EAAA,EAAKO,MAAN,4BACA,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,UAAQ,EAACvG,SAAUoC,KAAK2C,cAAe3B,UAAU,iBAGnE,kBAAC0C,EAAA,EAAKG,MAAN,CAAaC,GAAIC,IAAKC,UAAU,qBAAqBhD,UAAU,cAC3D,kBAAC0C,EAAA,EAAKO,MAAN,6CACA,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,UAAQ,EAACvG,SAAUoC,KAAK6C,kBAAmB7B,UAAU,iBAEvE,kBAAC0C,EAAA,EAAKG,MAAN,CAAaC,GAAIC,IAAKC,UAAU,qBAAqBhD,UAAU,cAC3D,kBAAC0C,EAAA,EAAKO,MAAN,iDACA,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,UAAQ,EAACvG,SAAUoC,KAAK8C,sBAAuB9B,UAAU,iBAM3E,yBAAKA,UAAU,aACX,kBAAC,EAAD,CACIV,OAAQN,KAAK9C,MAAMoD,OAEnBM,OAAO,QACPJ,KAAM,GACNT,OAAQC,KAAKtB,MAAMqB,OACnBwC,SAAUvC,KAAKtB,MAAM6D,YAG7B,kBAAC6B,EAAA,EAAD,CAAQC,QAAQ,UAAU5C,KAAK,SAAST,UAAU,iBAAlD,wB,GAzFIkB,aAgGToC,cAAWnC,G,+DCvDXoC,E,YApCX,WAAYrH,GAAQ,IAAD,8BACf,4CAAMA,KAOVsH,IAAIC,IAAQC,WANR,EAAKhG,MAAQ,CACTiG,SAAU,aAAuB1F,aAAa2F,QAAQ,SAAW,kBAAwB3F,aAAa2F,QAAQ,aAC1G,sBAA4B3F,aAAa2F,QAAQ,iBAAmB,iBAAuB3F,aAAa2F,QAAQ,YAAc,MAJvH,E,sEAUf,OACI,yBAAK5D,UAAU,gBACX,kBAAC6D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACf,EAAA,EAAD,KACI,uBAAG/C,UAAU,gBAAb,0CACA,kBAACoD,EAAA,EAAD,wBAEJ,kBAACL,EAAA,EAAD,CAAKgB,GAAI,EAAG/D,UAAU,WAClB,8CAEA,2BAAI/B,aAAa2F,QAAQ,cACzB,kBAAC,IAAD,CAAQlE,MAAO,CAAEC,MAAO,MAAOC,OAAQ,QAAU3C,MAAO+B,KAAKtB,MAAMiG,WACnE,yCAAe3E,KAAKwE,MAExB,kBAACT,EAAA,EAAD,CAAK/C,UAAU,aACX,kBAACoD,EAAA,EAAD,CAAQpD,UAAU,WAAWgE,QAAShF,KAAKiF,eAA3C,2B,GA3BD/C,aCWZgD,MAhBf,WACE,OACE,yBAAKlE,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOmE,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC1B,kBAAC,IAAD,CAAUC,GAAG,kBAEf,kBAAC,IAAD,CAAOF,KAAK,aAAaG,UAAWC,IACpC,kBAAC,IAAD,CAAOJ,KAAK,cAAcG,UAAWE,OCFzBC,QACW,cAA7BnC,OAAO1E,SAAS8G,UAEe,UAA7BpC,OAAO1E,SAAS8G,UAEhBpC,OAAO1E,SAAS8G,SAASC,MACvB,2D,OCXNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxG,MAAK,SAAAyG,GACJA,EAAaC,gBAEdC,OAAM,SAAAxG,GACLC,QAAQD,MAAMA,EAAM4C,c","file":"static/js/main.86d6cda5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDJW4jsPlNKgv6jFm3B5Edp5ywgdqLWdmc\");\r\nGeocode.enableDebug();\r\nclass Map extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            address: '',\r\n            city: '',\r\n            area: '',\r\n            state: '',\r\n            mapPosition: {\r\n                lat: this.props.center.lat,\r\n                lng: this.props.center.lng\r\n            },\r\n            markerPosition: {\r\n                lat: this.props.center.lat,\r\n                lng: this.props.center.lng\r\n            }\r\n        }\r\n    }\r\n    /**\r\n      * Get the current address from the default map position and set those values in the state\r\n      */\r\n    componentDidMount() {\r\n        Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(\r\n            response => {\r\n                const address = response.results[0].formatted_address,\r\n                    addressArray = response.results[0].address_components,\r\n                    city = this.getCity(addressArray),\r\n                    area = this.getArea(addressArray),\r\n                    state = this.getState(addressArray);\r\n\r\n                // console.log('city', city, area, state);\r\n\r\n                this.setState({\r\n                    address: (address) ? address : '',\r\n                    area: (area) ? area : '',\r\n                    city: (city) ? city : '',\r\n                    state: (state) ? state : '',\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n    /**\r\n      * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n      *\r\n      * @param nextProps\r\n      * @param nextState\r\n      * @return {boolean}\r\n      */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (\r\n            this.state.markerPosition.lat !== this.props.center.lat ||\r\n            this.state.address !== nextState.address ||\r\n            this.state.city !== nextState.city ||\r\n            this.state.area !== nextState.area ||\r\n            this.state.state !== nextState.state\r\n        ) {\r\n            return true\r\n        } else if (this.props.center.lat === nextProps.center.lat) {\r\n            return false\r\n        }\r\n    }\r\n    /**\r\n      * Get the city and set the city input value to the one selected\r\n      *\r\n      * @param addressArray\r\n      * @return {string}\r\n      */\r\n    getCity = (addressArray) => {\r\n        let city = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n                city = addressArray[i].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n      * Get the area and set the area input value to the one selected\r\n      *\r\n      * @param addressArray\r\n      * @return {string}\r\n      */\r\n    getArea = (addressArray) => {\r\n        let area = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0]) {\r\n                for (let j = 0; j < addressArray[i].types.length; j++) {\r\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n                        area = addressArray[i].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n      * Get the address and set the address input value to the one selected\r\n      *\r\n      * @param addressArray\r\n      * @return {string}\r\n      */\r\n    getState = (addressArray) => {\r\n        let state = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            for (let i = 0; i < addressArray.length; i++) {\r\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n                    state = addressArray[i].long_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n      * And function for city,state and address input\r\n      * @param event\r\n      */\r\n    onChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n    /**\r\n      * This Event triggers when the marker window is closed\r\n      *\r\n      * @param event\r\n      */\r\n    onInfoWindowClose = (event) => {\r\n    };\r\n    /**\r\n      * When the user types an address in the search box\r\n      * @param place\r\n      */\r\n    onPlaceSelected = (place) => {\r\n        const address = place.formatted_address,\r\n            addressArray = place.address_components,\r\n            city = this.getCity(addressArray),\r\n            area = this.getArea(addressArray),\r\n            state = this.getState(addressArray),\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n        // Set these values in the state.\r\n        localStorage.setItem('Location', address)\r\n        this.setState({\r\n            address: (address) ? address : '',\r\n            area: (area) ? area : '',\r\n            city: (city) ? city : '',\r\n            state: (state) ? state : '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    };\r\n    /**\r\n      * When the marker is dragged you get the lat and long using the functions available from event object.\r\n      * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n      * And then set those values in the state.\r\n      *\r\n      * @param event\r\n      */\r\n    onMarkerDragEnd = (event) => {\r\n        let newLat = event.latLng.lat(),\r\n            newLng = event.latLng.lng(),\r\n            addressArray = [];\r\n        Geocode.fromLatLng(newLat, newLng).then(\r\n            response => {\r\n                const address = response.results[0].formatted_address,\r\n                    addressArray = response.results[0].address_components,\r\n                    city = this.getCity(addressArray),\r\n                    area = this.getArea(addressArray),\r\n                    state = this.getState(addressArray);\r\n                this.setState({\r\n                    address: (address) ? address : '',\r\n                    area: (area) ? area : '',\r\n                    city: (city) ? city : '',\r\n                    state: (state) ? state : ''\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n    render() {\r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(\r\n                props => (\r\n                    <GoogleMap google={this.props.google}\r\n                        defaultZoom={this.props.zoom}\r\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                    >\r\n                        {/* For Auto complete Search Box */}\r\n                        <Autocomplete\r\n                            style={{\r\n                                width: '100%',\r\n                                height: '100%',\r\n                                paddingLeft: '16px',\r\n                                marginTop: '2px',\r\n                                marginBottom: '100px'\r\n                            }}\r\n                            onPlaceSelected={this.onPlaceSelected}\r\n                            className=\"autocomplete_input\"\r\n                            types={['(regions)']}\r\n                        />\r\n                        {/*Marker*/}\r\n                        <Marker google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            draggable={true}\r\n                            onDragEnd={this.onMarkerDragEnd}\r\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                        />\r\n                        <Marker />\r\n                        {/* InfoWindow on top of marker */}\r\n                        <InfoWindow\r\n                            onClose={this.onInfoWindowClose}\r\n                            position={{ lat: (this.state.markerPosition.lat + 0.0018), lng: this.state.markerPosition.lng }}\r\n                        >\r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>\r\n                    </GoogleMap>\r\n                )\r\n            )\r\n        );\r\n        let map;\r\n        if (this.props.center.lat !== undefined) {\r\n            map = <div>\r\n                <div>\r\n                    {/* <div className=\"form-group\">\r\n                        <label htmlFor=\"\">City</label>\r\n                        <input type=\"text\" name=\"city\" placeholder=\"city\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.city} />\r\n                    </div> */}\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Area</label>\r\n                        <input type=\"text\" name=\"area\" placeholder=\"Area\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.area} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        {/* <label htmlFor=\"\">State</label> */}\r\n                        <input type=\"text\" name=\"state\" laceholder=\"state\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.state} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"text\" name=\"address\" className=\"form-control\" onChange={this.onChange} readOnly=\"readOnly\" value={this.state.address} />\r\n                    </div>\r\n                </div>\r\n                <AsyncMap\r\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDJW4jsPlNKgv6jFm3B5Edp5ywgdqLWdmc&libraries=places\"\r\n                    loadingElement={\r\n                        <div style={{ height: `100%` }} />\r\n                    }\r\n                    containerElement={\r\n                        <div style={{ height: this.props.height }} />\r\n                    }\r\n                    mapElement={\r\n                        <div style={{ height: `100%` }} />\r\n                    }\r\n                />\r\n            </div>\r\n        } else {\r\n            map = <div style={{ height: this.props.height }} />\r\n        }\r\n        return (map)\r\n    }\r\n}\r\nexport default Map","import React, { Component } from 'react'\r\nimport { withRouter } from \"react-router-dom\"\r\nimport { Form, Col, Button } from 'react-bootstrap'\r\nimport \"../css/Inputpage.css\"\r\nimport Map from \"./Map\"\r\n\r\n\r\nclass Inputpage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Email: '',\r\n            StoreName: '',\r\n            StoreLocation: '',\r\n            Location: 'Israel',\r\n            validated: false,\r\n            message: '',\r\n            b_message: false,\r\n            center: {\r\n                lat: 31.0461,\r\n                lng: 34.8516,\r\n            },\r\n            zoom: 11\r\n\r\n        }\r\n        this.onChangeEmail = this.onChangeEmail.bind(this)\r\n        this.onChangeStoreName = this.onChangeStoreName.bind(this)\r\n        this.onChangeStoreLocation = this.onChangeStoreLocation.bind(this)\r\n        this.onChangeLocation = this.onChangeLocation.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    onChangeEmail(e) {\r\n        this.setState({ Email: e.target.value, b_message: false })\r\n    }\r\n\r\n    onChangeStoreName(e) {\r\n        this.setState({ StoreName: e.target.value, b_message: false })\r\n    }\r\n\r\n    onChangeStoreLocation(e) {\r\n        this.setState({ StoreLocation: e.target.value, b_message: false })\r\n    }\r\n\r\n    async onChangeLocation(e) {\r\n        await this.setState({ Location: e.target.value, b_message: false })\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        const form = event.currentTarget\r\n        if (form.checkValidity() === true) {\r\n            event.preventDefault()\r\n            this.props.history.push('/secondPage')\r\n            window.location.reload(false)\r\n        }\r\n        await this.setState({ validated: true })\r\n        localStorage.setItem('Email', this.state.Email)\r\n        localStorage.setItem('StoreName', this.state.StoreName)\r\n        localStorage.setItem('StoreLocation', this.state.StoreLocation)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Inputpage containerwidth\" display={this.state.display}>\r\n                <div className=\"input_header\">\r\n                    <h4>Have Place? Please read this information:</h4>\r\n                </div>\r\n                {/* <Alert severity=\"error\" className={this.state.b_message === true ? \"errorMessage_show\" : \"errorMessage_hide\"}>{this.state.message}</Alert> */}\r\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\r\n                    <Form.Group as={Col} controlId=\"validationCustom01\" className=\"input_area\">\r\n                        <Form.Label >Your email address:</Form.Label>\r\n                        <Form.Control required onChange={this.onChangeEmail} className=\"input_field\" />\r\n                        {/* type=\"email\" */}\r\n                    </Form.Group>\r\n                    <Form.Group  as={Col} controlId=\"validationCustom02\" className=\"input_area\">\r\n                        <Form.Label>Please insert the name of the store:</Form.Label>\r\n                        <Form.Control required onChange={this.onChangeStoreName} className=\"input_field\" />\r\n                    </Form.Group>\r\n                    <Form.Group  as={Col} controlId=\"validationCustom03\" className=\"input_area\">\r\n                        <Form.Label>Please insert the location of the store:</Form.Label>\r\n                        <Form.Control required onChange={this.onChangeStoreLocation} className=\"input_field\" />\r\n                    </Form.Group>\r\n                    {/* <Form.Group  as={Col} controlId=\"validationCustom04\" className=\"input_area\">\r\n                        <Form.Label>Please click on the exact address:</Form.Label>\r\n                    </Form.Group> */}\r\n\r\n                    <div className='googlemap'>\r\n                        <Map\r\n                            google={this.props.google}\r\n                            // center={{ lat: 18.5204, lng: 73.8567 }}\r\n                            height='400px'\r\n                            zoom={15}\r\n                            center={this.state.center}\r\n                            Location={this.state.Location}\r\n                        />\r\n                    </div>\r\n                    <Button variant=\"primary\" type=\"submit\" className=\"Create_Button\">Create QR code</Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Inputpage)","import React, { Component } from 'react'\r\n// import { withRouter } from \"react-router-dom\"\r\nimport \"../css/Inputpage.css\"\r\nimport { Container, Row, Col,Button } from 'react-bootstrap'\r\nimport '../css/QR_generator.css'\r\n// import Button from '@material-ui/core/Button'\r\nimport shortid from 'shortid';\r\n\r\n\r\nimport QRCode from 'qrcode.react'\r\n\r\nclass QR_generator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jsonData: \"{\" + \"\\\"email\\\":\\\"\" + localStorage.getItem('Email') + \"\\\",\\\"StoreName\\\":\\\"\" + localStorage.getItem('StoreName') +\r\n                \"\\\",\\\"StoreLocation\\\":\\\"\" + localStorage.getItem('StoreLocation') + \"\\\",\\\"Location\\\":\\\"\" + localStorage.getItem('Location') + \"\\\"}\"\r\n        }\r\n    }\r\n    \r\n    key=shortid.generate()\r\n    render() {\r\n        return (\r\n            <div className=\"QR_generator\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <p className=\"col1_headeer\">The QR file sent to your Email address</p>\r\n                            <Button>Click to Print</Button>\r\n                        </Col>\r\n                        <Col xs={5} className=\"QR_area\">\r\n                            <p>The Place name:</p>\r\n                            {/* <br /> */}\r\n                            <p>{localStorage.getItem('StoreName')}</p>\r\n                            <QRCode style={{ width: '70%', height: \"auto\" }} value={this.state.jsonData} />\r\n                            <p> UNIQUE ID:{this.key}</p>\r\n                        </Col>\r\n                        <Col className=\"QR_button\">\r\n                            <Button className=\"generate\" onClick={this.Generate_data}>Generate new QR</Button>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QR_generator","import React from 'react'\nimport './App.css'\nimport { HashRouter as Router, Route ,Redirect} from 'react-router-dom'      //npm install react-router-dom\nimport InputPage from './component/InputPage'\nimport GenerateQR from './component/GenerateQR'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <Route exact path=\"/\" render={() => (\n          <Redirect to=\"/InputPage\" />\n        )} />\n        <Route path='/inputPage' component={InputPage} />\n        <Route path='/secondPage' component={GenerateQR} />\n        {/* <Route path='/map' component={Map} /> */}\n        {/* <Route path='/GenerateQR' component={GenerateQR} /> */}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}